env:
  browser: true
  es6: true
  node: true

ignorePatterns:
  - dist
  - out
  - template
  - "packages/**/wasm/*.js"
  - "!.storybook"
  - storybook-static
  - coverage

plugins:
  - file-progress
  - tss-unused-classes
  - "@lichtblick/eslint-plugin-suite"

extends:
  - plugin:@lichtblick/base
  - plugin:@lichtblick/react
  - plugin:@lichtblick/jest
  - plugin:storybook/recommended
  - plugin:@lichtblick/suite/all

settings:
  import/internal-regex: "^@lichtblick"

rules:
  "@lichtblick/license-header": ["error", { licenseType: "MPL-2.0" }]
  "@lichtblick/prefer-hash-private": off

  tss-unused-classes/unused-classes: error

  # show progress while linting
  file-progress/activate: warn

  # enabled in .eslintrc.ci.yaml
  prettier/prettier: off
  import/no-self-import: off
  import/no-duplicates: off

  id-denylist:
    - error
    - useEffectOnce
    - window # don't allow redefining window
  no-console: off # configured in no-restricted-syntax

  react/jsx-uses-react: off
  react/prop-types: off # Unnecessary with typescript validation
  react-hooks/exhaustive-deps:
    - error
    - additionalHooks: "(useAsync(?!AppConfigurationValue))|useCallbackWithToast"
  react/jsx-curly-brace-presence: [error, never]

  # The _sx_ property is slow
  # https://stackoverflow.com/questions/68383046/is-there-a-performance-difference-between-the-sx-prop-and-the-makestyles-function
  react/forbid-component-props:
    - error
    - forbid:
        - propName: "sx"
          message: "Use of the sx prop is not advised due to performance issues. Consider using alternative styling methods instead."

  no-warning-comments:
    - error
    - terms: ["fixme", "xxx", "todo"]
      location: anywhere

  no-restricted-imports:
    - error
    - paths:
        - name: "@emotion/styled"
          importNames: [styled]
          message: "@emotion/styled has performance implications. Use tss-react/mui instead."

        - name: "@mui/material"
          importNames: [styled]
          message: "@mui/styled has performance implications. Use tss-react/mui instead."

        - name: "@mui/system"
          importNames: [styled]
          message: "@mui/styled has performance implications. Use tss-react/mui instead."

        - name: "@mui/material/styles/styled"
          message: "@mui/styled has performance implications. Use tss-react/mui instead."

        - name: "@mui/material"
          importNames: [Box]
          message: "@mui/Box has performance implications. Use tss-react/mui instead."

        - name: "@mui/system"
          importNames: [Box]
          message: "@mui/Box has performance implications. Use tss-react/mui instead."

  no-restricted-syntax:
    - error
    - selector: "MethodDefinition[kind='get'], Property[kind='get']"
      message: "Property getters are not allowed; prefer function syntax instead."
    - selector: "MethodDefinition[kind='set'], Property[kind='set']"
      message: "Property setters are not allowed; prefer function syntax instead."

    # We disable console methods here rather than using no-console so that it doesn't prohibit overrides such as "console.info = ..."
    - selector: "CallExpression[callee.object.name='console'][callee.property.name!=/^(warn|error|debug|assert)$/]"
      message: "Unexpected property on console object was called"
  "@typescript-eslint/strict-boolean-expressions":
    - error
      # Force explicit checks that strings are empty
    - allowString: false
      # Force explicit checks that numbers are != 0 or NaN
      allowNumber: false
      # Keeps the error count manageable while we enhance type information from the flow conversion
      allowAny: true

overrides:
  - files: ["*.ts", "*.tsx"]
    extends:
      - plugin:@lichtblick/typescript
    parserOptions:
      project: ./tsconfig.eslint.json
    rules:
      "@typescript-eslint/ban-ts-comment":
        - error
        - ts-expect-error: allow-with-description

      "@typescript-eslint/explicit-member-accessibility": error

      "@typescript-eslint/no-inferrable-types": off # It's sometimes useful to explicitly name to guard against future changes
      "@typescript-eslint/no-empty-function": off

      "@typescript-eslint/no-unnecessary-type-parameters": off # Turn off to keep generic methods as it is
      "@typescript-eslint/switch-exhaustiveness-check": off # Turn off to keep switch statements as it is
      "@typescript-eslint/no-unsafe-enum-comparison": off # Turn off to keep enum comparison as it is

      # These are related to `any` types, which we generally don't have except from imports
      "@typescript-eslint/no-unsafe-member-access": off
      "@typescript-eslint/no-unsafe-return": off
      "@typescript-eslint/no-unsafe-assignment": off
      "@typescript-eslint/no-unsafe-call": off

      # These could theoretically be turned on (or merit investigation) but are currently noisy
      "@typescript-eslint/no-misused-promises": off # Often used with e.g. useCallback(async () => {})
      "@typescript-eslint/restrict-template-expressions": off

      "@typescript-eslint/prefer-regexp-exec": off
      "@typescript-eslint/no-unnecessary-condition": error
      "@typescript-eslint/unbound-method": [error, { ignoreStatic: true }]

      # https://eslint.org/docs/latest/rules/no-loop-func
      "no-loop-func": error

      # unused vars must have `_` prefix, but `_` alone is not ignored (see @lichtblick/suite/lodash-imports)
      "@typescript-eslint/no-unused-vars":
        - error
        - vars: all
          args: after-used
          varsIgnorePattern: "^_."
          argsIgnorePattern: "^_."

  - rules:
      "@typescript-eslint/no-explicit-any": off
    files:
      - "**/*.stories.tsx"
      - "**/*.test.tsx"
      - "**/*.test.ts"

  - rules:
      react/forbid-component-props: off
    files:
      - "**/*.stories.tsx"

  - files:
      - "**/*.style.ts"
    rules:
      tss-unused-classes/unused-classes: "off"

  - files:
      - "packages/suite-base/src/testing/**"
    rules:
      "@typescript-eslint/no-extraneous-class": "off"
